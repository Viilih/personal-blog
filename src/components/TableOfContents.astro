---
import { Icon } from "astro-icon/components";

interface Heading {
  depth: number;
  text: string;
  slug: string;
  subheadings: Heading[];
}

interface Props {
  toc: Heading[];
}

const { toc } = Astro.props;
---

<nav class="toc" aria-label="Table of contents">
  <button class="toc-header" id="toc-toggle" aria-expanded="false">
    <span class="toc-title">CONTENTS</span>
    <span class="toc-count">({toc.length})</span>
    <Icon name="down-arrow" class="toc-icon" />
  </button>
  <ul class="toc-list" id="toc-content">
    {
      toc.map((heading) => (
        <li>
          <a href={`#${heading.slug}`} class="toc-link">
            {heading.text}
          </a>
          {heading.subheadings.length > 0 && (
            <ul class="toc-sublist">
              {heading.subheadings.map((subheading) => (
                <li>
                  <a href={`#${subheading.slug}`} class="toc-sublink">
                    {subheading.text}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))
    }
  </ul>
</nav>

<style>
  :root {
    --toc-bg: rgb(247, 247, 247);
    --text-primary: #333;
    --text-secondary: #666;
    --transition-speed: 0.2s;
  }

  .toc {
    position: sticky;
    top: 2rem;
    background: var(--toc-bg);
    border-radius: 4px;
    padding: 1rem;
    width: min(200px, 100%);
  }

  .toc-header {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    width: 100%;
    padding: 0;
    border: 0;
    background: transparent;
    cursor: pointer;
  }

  .toc-title {
    font-weight: 500;
    color: var(--text-primary);
  }
  .toc-count {
    color: var(--text-secondary);
  }

  .toc-icon {
    transition: transform var(--transition-speed) ease;
    margin-left: auto;
  }
  .toc-icon.rotated {
    transform: rotate(180deg);
  }

  .toc-list {
    list-style: none;
    padding: 0;
    margin: 0;
    gap: 1rem;
    max-height: 0;
    overflow: hidden;
    transition:
      max-height var(--transition-speed) ease,
      opacity var(--transition-speed) ease;
    opacity: 0;
  }
  .toc-list.show {
    max-height: 850px; /* Maximum height before scrolling */
    overflow-y: auto; /* Enable scrolling when needed */
    opacity: 1;
    padding-right: 0.5rem; /* Space for scrollbar */
  }

  /* Scrollbar styling for better visibility */
  .toc-list.show::-webkit-scrollbar {
    width: 5px;
  }
  .toc-list.show::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  .toc-list.show::-webkit-scrollbar-thumb {
    background: #aaa;
    border-radius: 10px;
  }
  .toc-list.show::-webkit-scrollbar-thumb:hover {
    background: #888;
  }

  .toc-link,
  .toc-sublink {
    display: block;
    text-decoration: none;
    line-height: 1.5;
    transition: color var(--transition-speed);
    padding: 0.25rem 0;
  }
  .toc-link {
    padding-top: 0.5rem;
    color: var(--text-primary);
    font-size: 0.9rem;
    font-weight: 500;
  }
  .toc-sublink {
    color: var(--text-secondary);
    font-size: 0.85rem;
    padding-left: 0.25rem;
  }
  .toc-link:hover,
  .toc-sublink:hover {
    color: var(--text-primary);
    text-decoration: underline;
  }

  .toc-sublist {
    list-style: none;
    padding-left: 1rem;
    margin-top: 0.25rem;
    margin-bottom: 0.25rem;
    gap: 0.25rem;
    display: grid;
  }

  @media (max-width: 768px) {
    .toc {
      position: relative;
      top: 0;
      margin-top: 2rem;
    }
  }
</style>

<script is:inline>
  (function initTOC() {
    const tocToggle = document.getElementById("toc-toggle");
    const tocContent = document.getElementById("toc-content");
    const tocIcon = document.querySelector(".toc-icon");

    if (!tocToggle || !tocContent || !tocIcon) return;

    // Open TOC by default if it fits on the screen
    const initialOpen = window.innerHeight > 900;
    if (initialOpen) {
      tocContent.classList.add("show");
      tocIcon.classList.add("rotated");
      tocToggle.setAttribute("aria-expanded", "true");
    }

    const toggle = () => {
      const isExpanded = tocToggle.getAttribute("aria-expanded") === "true";
      tocContent.classList.toggle("show", !isExpanded);
      tocIcon.classList.toggle("rotated", !isExpanded);
      tocToggle.setAttribute("aria-expanded", String(!isExpanded));
    };

    tocToggle.addEventListener("click", toggle);
  })();
</script>
