---
import { languages } from "../i18n/ui";
import { getRelativeLocaleUrl } from "astro:i18n";

const currentPath = Astro.url.pathname;
const currentLang = Astro.currentLocale ?? "en";

// Determine the new language to switch to
const newLang = currentLang === "en" ? "pt-br" : "en";

// Remove any locale prefix from the current path
const cleanPath = currentPath.replace(/^\/(en|pt-br)/, "");
---

<div class="language-picker">
  {
    Object.entries(languages).map(([lang, label], index) => (
      <>
        {index > 0 && <div class="language-separator" />}
        <a
          href={getRelativeLocaleUrl(newLang, cleanPath)}
          class={`language-link ${currentLang === lang ? "active" : ""}`}
        >
          {label}
        </a>
      </>
    ))
  }
</div>

<style>
  .language-picker {
    display: flex;
    align-items: center;
  }

  .language-link {
    font-size: 14px;
    font-weight: 500;
    color: #6b7280;
    text-decoration: none;
    padding: 4px 8px;
    transition: color 0.2s ease;
  }

  .language-link:hover {
    color: #111827;
  }

  .language-link.active {
    color: #000000;
  }

  .language-separator {
    height: 16px;
    width: 1px;
    background-color: #d1d5db;
    margin: 0 4px;
  }
</style>
